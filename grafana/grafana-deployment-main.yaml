---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ebs-sc
provisioner: ebs.csi.aws.com

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana 
  namespace: grafana
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ebs-sc
  resources:
    requests:
      storage: 4Gi
---
apiVersion: v1
data:
  admin-password: SUhSRGJjS2NmOTBJUEZ5cGhOQ0VYamFUSU1PTXp1YkxBTmhvQVE5bA==
  admin-user: YWRtaW4=
  ldap-toml: ""
kind: Secret
metadata:
  labels:
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/name: grafana
  name: grafana
  namespace: grafana
type: Opaque
---
apiVersion: v1
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    [server]
    domain = ''
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/name: grafana
  name: grafana
  namespace: grafana
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: grafana
data:
  datasources.yaml: |-
    {
      "apiVersion": 1,
      "deleteDatasources": [
        {
          "name": "mimir"
        },
        {
          "name": "tempo"
        },
        {
          "name": "prometheus"
        },
        {
          "name": "Loki"
        }
      ],
      "datasources": [
        {
          "name": "mimir",
          "type": "prometheus",
          "uid": "kentbank-mimir",
          "access": "proxy",
          "url": "http://mimir-nginx.mimir.svc:80/prometheus",
          "basicAuth": true,
          "basicAuthUser": "kentbank",
          "editable": true,
          "jsonData": {
            "httpHeaderName1": "X-Scope-OrgID"
          },
          "secureJsonData": {
            "basicAuthPassword": "awsome",
            "httpHeaderValue1": "kentbank"
          }
        },
        {
          "name": "tempo",
          "type": "tempo",
          "uid": "kentbank-tempo",
          "access": "proxy",
          "url": "http://tempo.tempo.svc:3100",
          "isDefault": false,
          "version": 1,
          "editable": true,
          "basicAuth": true,
          "basicAuthUser": "kentbank",
          "jsonData": {
            "httpHeaderName1": "X-Scope-OrgID"
          },
          "secureJsonData": {
            "basicAuthPassword": "awsome",
            "httpHeaderValue1": "kentbank"
          }
        },
        {
          "name": "Loki",
          "type": "loki",
          "access": "proxy",
          "uid": "kentbank-loki",
          "url": "http://loki.loki.svc:3100",
          "basicAuth": true,
          "basicAuthUser": "kentbank",
          "editable": true,
          "jsonData": {
            "httpHeaderName1": "X-Scope-OrgID",
            "derivedFields": [
              {
                "datasourceUid": "kentbank-tempo",
                "matcherRegex": '((\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+)(\d+|[a-z]+))',
                "name": "TraceID",
                "url": "$${__value.raw}"
              }
            ]
          },
          "secureJsonData": {
            "basicAuthPassword": "awsome",
            "httpHeaderValue1": "kentbank"
          }
        }
      ]
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard
  namespace: grafana 
data:
  dashboard.json : |-
    {
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": {
              "type": "grafana",
              "uid": "-- Grafana --"
            },
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "target": {
              "limit": 100,
              "matchAny": false,
              "tags": [],
              "type": "dashboard"
            },
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "fiscalYearStartMonth": 0,
      "graphTooltip": 0,
      "id": 1,
      "links": [],
      "liveNow": false,
      "panels": [
        {
          "datasource": {
            "type": "loki",
            "uid": "O_WAUNLVk"
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 0
          },
          "id": 1,
          "options": {
            "dedupStrategy": "none",
            "enableLogDetails": true,
            "prettifyLogMessage": false,
            "showCommonLabels": false,
            "showLabels": false,
            "showTime": false,
            "sortOrder": "Descending",
            "wrapLogMessage": false
          },
          "targets": [
            {
              "datasource": {
                "type": "loki",
                "uid": "O_WAUNLVk"
              },
              "editorMode": "builder",
              "expr": "{container=\"argocd-repo-server\"} |= ``",
              "key": "Q-179c5770-b82d-4cb4-8ab4-9920258a8aab-0",
              "queryType": "range",
              "refId": "A"
            }
          ],
          "title": "New Panel",
          "type": "logs"
        }
      ],
      "schemaVersion": 37,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-6h",
        "to": "now"
      },
      "timepicker": {},
      "timezone": "",
      "title": "BibinJsonTest123",
      "uid": "Z6RmGKL4z123",
      "version": 1,
      "weekStart": ""
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  generation: 1
  labels:
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/name: grafana
    app.kubernetes.io/version: 9.3.8
  name: grafana
  namespace: grafana
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: grafana
      app.kubernetes.io/name: grafana
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: ebdf42934b21af8c53c987102a693badcc96ae124f40f1bb8716496be32dd257
        checksum/dashboards-json-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/sc-dashboard-provider-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: 31c72efe647f2b1fcf2ee5607a46d379da21800a21518975cd213976c7052ecd
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: grafana
        app.kubernetes.io/name: grafana
    spec:
      automountServiceAccountToken: true
      containers:
      - env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              key: admin-user
              name: grafana
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: admin-password
              name: grafana
        - name: GF_PATHS_DATA
          value: /var/lib/grafana/
        - name: GF_PATHS_LOGS
          value: /var/log/grafana
        - name: GF_PATHS_PLUGINS
          value: /var/lib/grafana/plugins
        - name: GF_PATHS_PROVISIONING
          value: /etc/grafana/provisioning
        image: grafana/grafana:9.3.8
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: grafana
          protocol: TCP
        - containerPort: 9094
          name: gossip-tcp
          protocol: TCP
        - containerPort: 9094
          name: gossip-udp
          protocol: UDP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/grafana/grafana.ini
          name: config
          subPath: grafana.ini
        - mountPath: /var/lib/grafana
          name: storage
        - mountPath: /etc/grafana/provisioning/datasources
          name: grafana-datasources
          readOnly: false
        - mountPath: /etc/grafana/provisioning/dashboards
          name: grafana-dashboard
          readOnly: false
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      initContainers:
      - command:
        - chown
        - -R
        - 472:472
        - /var/lib/grafana
        image: busybox:1.31.1
        imagePullPolicy: IfNotPresent
        name: init-chown-data
        resources: {}
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: storage
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsUser: 472
      terminationGracePeriodSeconds: 30
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: grafana
      - name: grafana-datasources 
        configMap:
          defaultMode: 420
          name: grafana-datasources
      - name: config
        configMap:
          defaultMode: 420
          name: grafana
      - name: grafana-dashboard
        configMap:
          defaultMode: 420
          name: grafana-dashboard
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: grafana
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-internal: "false"
spec:
  ports:
    - port: 80 
      protocol: TCP
      targetPort: 3000 
  selector:
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/name: grafana
  sessionAffinity: None
  type: LoadBalancer
